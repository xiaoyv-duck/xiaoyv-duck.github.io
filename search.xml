<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>仿12306 Part 02</title>
      <link href="/2024/05/22/12306_P2/"/>
      <url>/2024/05/22/12306_P2/</url>
      
        <content type="html"><![CDATA[<p>前端搭建</p><span id="more"></span><p>Node.js v18.20.2(LTS)</p><p>Vue 3</p><p>Vue CLI v5.0.8</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Node.js，官网下载安装，安装完成后<code>node -v</code>查看版本确认安装成功</p><p>更改镜像源：<code>npm config set registry https://registry.npmmirror.com</code></p><p>Vue CLI：<code>npm install -g @vue/cli</code>，<code>vue -V</code>显示<code>@vue/cli x.x.x</code>即成功。</p><p>如果安装后显示<code>vue 2.9.x</code>，<code>npm list -g --depth=0</code>列出全局安装的包，如果有@vue&#x2F;cli及版本号，那么应该是环境变量的问题，改一下路径。</p><p>打开IDEA设置——语言和框架——Node.js，选择刚才安装的目录</p><p>随后在<code>train</code>目录下创建vue项目，IDEA Alt+F12，或者左下角有一个终端图标、点一下。</p><p><code>vue create web</code>，选择对应设置，上下键+空格选择+回车下一项</p><p>最后两项是是否将设置保存为模板，保存后下次就不用再选择一遍。创建完成后可以看到web目录及相关内容。</p><p>随后分别执行<code>cd web</code>和<code>npm run serve</code>可以看到：</p><p>这样我们就能通过8080端口看到我们的前端页面了。</p><p>如果创建失败就重新输一遍命令。</p><p><code>web/package.json</code>，我们可以在这里看到启动项：</p><p>点击那个小三角就可以启动项目，默认使用8080端口。如果想修改端口：<code>vue-cli-service serve --port xxxx</code>。右键<code>package.json</code>，显示npm脚本，可以把这个窗口放到左边，这样启动时双击<code>serve</code>就可以了。</p><p>提交：Vue CLI创建web模块</p><h3 id="集成Ant-Design-Vue、一个基于Vue-js的UI框架"><a href="#集成Ant-Design-Vue、一个基于Vue-js的UI框架" class="headerlink" title="集成Ant Design Vue、一个基于Vue.js的UI框架"></a>集成Ant Design Vue、一个基于Vue.js的UI框架</h3><p>百度Ant Design Vue，进入官网，找到文档，选择3.版本</p><p>这里脚手架已经安装过了，<code>npm i ant-design-vue@3.2.20</code>安装指定版本</p><p>再点击组件——Icon图标，这里就有安装命令<code>npm install --save @ant-design/icons-vue</code>，我们先安装这两个。</p><p>在<code>main.js</code>里添加依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">import Antd from &#x27;ant-design-vue&#x27;</span><br><span class="line">import &#x27;ant-design-vue/dist/antd.css&#x27;</span><br><span class="line">import * as Icons from &#x27;@ant-design/icons-vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(Antd).use(store).use(router).mount(&#x27;#app&#x27;)</span><br><span class="line">const icons = Icons</span><br><span class="line">for (const i in icons) &#123;</span><br><span class="line">    app.component(i, icons[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>views&#x2F;AboutView.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span><br><span class="line">    &lt;a-button&gt;test&lt;/a-button&gt;&lt;up-square-outlined /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>a-button</code>是一个Ant Design Vue的按钮组件，<code>&lt;up-square-outlined /&gt;</code>是一个图标组件。</p><p>在官网Icon图标这一页有很多图标，选一个喜欢的点一下就可以复制，然后贴在<code>&lt;/a-button&gt;</code>后面就可以了，这样我们就可以在about页面看到新添加的内容：</p><h3 id="注册登陆页面"><a href="#注册登陆页面" class="headerlink" title="注册登陆页面"></a>注册登陆页面</h3><p>首先在<code>package.json</code>中添加这么一行：<code>&quot;vue/multi-word-component-names&quot;: 0</code>，这个规则要求Vue组件的名称必须是多词的，不让我用一个单词，关掉关掉。</p><p>在<code>router/index.js</code>中添加路由，有两种方式，蓝框的是静态，一次性全部加载，但如果页面非常多编译后文件就会很大。红框懒加载，用哪个加载哪个，缺点就是访问的时候要多加载一会。</p><p>新建<code>views/Login.vue</code>文件，代码从Ant Design Vue复制，选择JS，Ant Design Vue提供了很多现成的，有需要可以直接复制。</p><p>随后重写<code>App.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a-row class=&quot;login&quot;&gt;</span><br><span class="line">    &lt;a-col :span=&quot;6&quot; :offset=&quot;9&quot; class=&quot;login-main&quot;&gt;</span><br><span class="line">      &lt;h1 style=&quot;text-align: center&quot;&gt;&lt;rocket-two-tone /&gt;&amp;nbsp;手机号登录&lt;/h1&gt;</span><br><span class="line">      &lt;a-form</span><br><span class="line">          :model=&quot;loginForm&quot;</span><br><span class="line">          name=&quot;basic&quot;</span><br><span class="line">          autocomplete=&quot;off&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;a-form-item</span><br><span class="line">            label=&quot;&quot;</span><br><span class="line">            name=&quot;mobile&quot;</span><br><span class="line">            :rules=&quot;[&#123; required: true, message: &#x27;请输入手机号!&#x27; &#125;]&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;loginForm.mobile&quot; placeholder=&quot;手机号&quot;/&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item</span><br><span class="line">            label=&quot;&quot;</span><br><span class="line">            name=&quot;code&quot;</span><br><span class="line">            :rules=&quot;[&#123; required: true, message: &#x27;请输入验证码!&#x27; &#125;]&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;a-input v-model:value=&quot;loginForm.code&quot;&gt;</span><br><span class="line">            &lt;template #addonAfter&gt;</span><br><span class="line">              &lt;a @click=&quot;sendCode&quot;&gt;获取验证码&lt;/a&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/a-input&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a-form-item&gt;</span><br><span class="line">          &lt;a-button type=&quot;primary&quot; block @click=&quot;login&quot;&gt;登录&lt;/a-button&gt;</span><br><span class="line">        &lt;/a-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/a-form&gt;</span><br><span class="line">    &lt;/a-col&gt;</span><br><span class="line">  &lt;/a-row&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineComponent, reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &quot;login-view&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const loginForm = reactive(&#123;</span><br><span class="line">      mobile: &#x27;13100122100&#x27;,</span><br><span class="line">      code: &#x27;&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const onFinish = values =&gt; &#123;</span><br><span class="line">      console.log(&#x27;Success:&#x27;, values)</span><br><span class="line">    &#125;</span><br><span class="line">    const onFinishFailed = errorInfo =&gt; &#123;</span><br><span class="line">      console.log(&#x27;Failed:&#x27;, errorInfo)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      loginForm,</span><br><span class="line">      onFinish,</span><br><span class="line">      onFinishFailed</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.login-main h1 &#123;</span><br><span class="line">  font-size: 25px;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.login-main &#123;</span><br><span class="line">  margin-top: 100px;</span><br><span class="line">  padding: 30px 30px 20px;</span><br><span class="line">  border: 2px solid grey;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  background-color: #fcfcfc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>此时的登陆页面：</p><p>提交：集成Ant Design Vue，注册登陆页面开发</p><h3 id="短信验证码接口"><a href="#短信验证码接口" class="headerlink" title="短信验证码接口"></a>短信验证码接口</h3><p>流程：输入手机号，点击发送验证码–&gt;后端接口校验–&gt;是否注册过？</p><p>–&gt;是：生成验证码，登录</p><p>–&gt;否：将手机号保存（就是注册），生成验证码，登录</p><p>其他步骤：这一部分在实际开发中都是必要的，但咱们没搞。</p><p>校验手机号是否频繁请求短信验证码，短信发送倒计时，多少秒可以发一个，对接短信通道（氪金项）</p><p>贴个项目结构，我就不说目录了，小小偷个懒。</p><p>先搞个实时模板，设置——编辑器——实时模板</p><p>页面左上角加号，新建一个Mine组，放我们自定义的模板，添加两个模板</p><p>定义LOG，缩写随意，我的是<code>logf</code>模板文本：<code>private static final Logger LOG = LoggerFactory.getLogger($CLASSNAME$.class);</code>编辑变量，className()。</p><p>打印日志，<code>logi</code>。文本：<code>LOG.info(&quot;&quot;);</code>保存后更改适用范围——Java</p><p>这样就可以像<code>sout</code>和<code>psvm</code>那样快速生成了。</p><p>输入参数规范，<code>MemberSendCodeRequest</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@NotBlank(message = &quot;手机号不能为空&quot;)</span><br><span class="line">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;, message = &quot;手机号格式错误&quot;)</span><br><span class="line">private String mobile;</span><br><span class="line"></span><br><span class="line">public String getMobile() &#123;</span><br><span class="line">    return mobile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMobile(String mobile) &#123;</span><br><span class="line">    this.mobile = mobile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">    return &quot;MemberSendCodeRequest&#123;&quot; +</span><br><span class="line">            &quot;mobile=&#x27;&quot; + mobile + &#x27;\&#x27;&#x27; +</span><br><span class="line">            &#x27;&#125;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemberService：</p><p>首先在最前面添加一行定义LOG，用咱们刚设置的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MemberService&#123;</span><br><span class="line">private static final Logger LOG = LoggerFactory.getLogger(MemberService.class);</span><br></pre></td></tr></table></figure><p>随后是验证码的处理逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void sendCode(MemberSendCodeRequest request)&#123;</span><br><span class="line">String mobile = request.getMobile();</span><br><span class="line"></span><br><span class="line">MemberExample memberExample = new MemberExample();</span><br><span class="line">memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">List&lt;Member&gt; membersList = memberMapper.selectByExample(memberExample);</span><br><span class="line"></span><br><span class="line">//手机号不存在则保存</span><br><span class="line">if(CollUtil.isEmpty(membersList))&#123;</span><br><span class="line">    LOG.info(&quot;手机号未注册&quot;);</span><br><span class="line">    Member member = new Member();</span><br><span class="line">    member.setId(SnowUtil.getSnowflakeNextId());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    LOG.info(&quot;手机号已注册&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生成验证码</span><br><span class="line">String code = RandomUtil.randomString(4);</span><br><span class="line">LOG.info(&quot;生成短信验证码：&#123;&#125;&quot;, code);</span><br><span class="line"></span><br><span class="line">// 保存短信记录表：手机号，短信验证码，有效期，是否已使用，业务类型，发送时间，使用时间</span><br><span class="line">// ……未实现</span><br><span class="line">LOG.info(&quot;保存短信记录表&quot;);</span><br><span class="line"></span><br><span class="line">// 对接短信通道，发送短信</span><br><span class="line">// ……未实现</span><br><span class="line">LOG.info(&quot;对接短信通道&quot;);</span><br></pre></td></tr></table></figure><p>MemberController：</p><p>添加新内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/send-code&quot;)</span><br><span class="line">public CommonRespond&lt;Long&gt; sendCode(@Valid MemberSendCodeRequest request)&#123;</span><br><span class="line">    memberService.sendCode(request);</span><br><span class="line">    return new CommonRespond&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，分别测试：1.手机号已注册。2.手机号未注册。3.手机号格式错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8000/member/member/send-code</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=13200000000 # 写一个已注测的手机号</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">POST http://localhost:8000/member/member/send-code</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=13590000001</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">POST http://localhost:8000/member/member/send-code</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=1319000000</span><br><span class="line">###</span><br></pre></td></tr></table></figure><h3 id="验证码登录接口"><a href="#验证码登录接口" class="headerlink" title="验证码登录接口"></a>验证码登录接口</h3><p>MemberLoginRequest：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MemberLoginRequest &#123;</span><br><span class="line">    @NotBlank(message = &quot;手机号不能为空&quot;)</span><br><span class="line">    @Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;, message = &quot;手机号格式错误&quot;)</span><br><span class="line">    private String mobile;</span><br><span class="line"></span><br><span class="line">    @NotBlank(message = &quot;验证码不能为空&quot;)</span><br><span class="line">    private String code;</span><br><span class="line">    //还有set,get,toString，我这里省略了，实际写的时候记得加</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemberLoginResponse：</p><p>直接将<code>domain</code>里的<code>Member</code>类复制，新建目录<code>response</code>，粘贴在这里，改个名</p><p>添加两个异常枚举：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEMBER_MOBILE_NOT_EXIST(&quot;请先获取短信验证码&quot;), </span><br><span class="line">MEMBER_MOBILE_CODE_ERROR(&quot;短信验证码错误&quot;);</span><br></pre></td></tr></table></figure><p>Server方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public MemberLoginResponse login(MemberLoginRequest request) &#123;</span><br><span class="line">    String mobile = request.getMobile();</span><br><span class="line">    String code = request.getCode();</span><br><span class="line">    Member memberDB = selectByMobile(mobile);</span><br><span class="line"></span><br><span class="line">    // 手机号不存在则保存</span><br><span class="line">    if (ObjectUtil.isNull(memberDB)) &#123;</span><br><span class="line">        throw new BusinessException(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 校验验证码</span><br><span class="line">    // 正常情况这里应该校验我们生成的验证码，为了测试方便，校验8888</span><br><span class="line">    if(!&quot;8888&quot;.equals(code))&#123;</span><br><span class="line">        throw new BusinessException(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return BeanUtil.copyProperties(memberDB,MemberLoginResponse.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装了一个selectByMobile——通过手机号找用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private Member selectByMobile(String mobile) &#123;</span><br><span class="line">    MemberExample memberExample = new MemberExample();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; membersList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    if (CollUtil.isEmpty(membersList)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return membersList.get(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public CommonRespond&lt;MemberLoginResponse&gt; login(@Valid MemberLoginRequest request)&#123;</span><br><span class="line">    MemberLoginResponse response = memberService.login(request);</span><br><span class="line">    return new CommonRespond&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8000/member/member/login</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=13000000000&amp;code=8888</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Springboot3-微服务12306 </category>
          
          <category> 微服务初始搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 12306 </tag>
            
            <tag> Vue 3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿12306 Part 01</title>
      <link href="/2024/05/22/12306_P1/"/>
      <url>/2024/05/22/12306_P1/</url>
      
        <content type="html"><![CDATA[<p>项目初始化及后端搭建</p><span id="more"></span><p>IntelliJ IDEA 2023.2.3</p><p>数据库：MySQL 8.0</p><p>Navicat Premium 16</p><p>注：这一节主要是框架搭建，没有太多12306相关的内容，大部分时候在跑一下、测试测试，看看有没有什么问题，更多的在解释配置设置类内容。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>新建项目，选择Spring Initializr，使用Maven工具构建和依赖管理，JDK版本为17（或以上）。组名自己安排，我的是<code>cn.xiaoyv</code>，即<code>xiaoyv-duck.cn</code>域名的反写（有点长，省略了-duck）</p><p>添加依赖项：Spring Boot DevTools、Spring Web、Cloud Bootstrap。版本随便选一个</p><p>创建成功</p><p>然后我们打开<code>pom.xml</code>文件，将版本号分别改为<code>3.0.0</code>和<code>2022.0.0</code></p><p>可能遇到的问题（我曾经遇到过的）：</p><p>主要是Maven工具的问题，弄得时候记得配置阿里云镜像</p><h4 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h4><p>打开设置文件：安装目录下conf文件夹内的<code>settings.xml</code>文件</p><p>找到<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签，将原本内容注释，添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">  &lt;/mirror&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">     &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span><br><span class="line">     &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span><br><span class="line">     &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span><br><span class="line">     &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span><br><span class="line">     &lt;blocked&gt;true&lt;/blocked&gt;</span><br><span class="line">  &lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure><p>以上，第一部分允许用户通过阿里云的镜像仓库加速Maven依赖的下载，第二部分则是一个安全措施，防止Maven通过不安全的HTTP协议下载依赖</p><p>配置本地仓库：<br>下载repository<br>链接:<a href="https://pan.baidu.com/s/1zkCMb9ZE0Kico4CJM35N2g?pwd=1111">百度网盘</a> 提取码: 1111<br>解压到自己指定的目录</p><p>找到<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>标签，将原本内容注释，添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;指定目录&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><p>我放在了D盘如下位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Tools\maven\mvn_repository\repository</span><br></pre></td></tr></table></figure><p>所以我添加的就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\Tools\maven\mvn_repository\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><h4 id="Maven相关设置："><a href="#Maven相关设置：" class="headerlink" title="Maven相关设置："></a>Maven相关设置：</h4><p>选择安装时的Maven相关的一些路径，设置文件就是我们刚才折腾的那个。</p><p>接下来我打算先搞一些插件，方便我们后续折腾。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>第一个是<code>CodeGlance Pro</code>，用于在侧边栏展示文件整体内容。一来可以观察哪里有bug（爆红），二来拉动预览框比鼠标滚轮快、还更准确。</p><p>第二个是<code>JRebel and XRebel</code>，这个就比较厉害了，IDEA热部署插件。热部署就是修改代码之后，不用重新启动项目，即可自动编译，测试新加模块。</p><p>后续开发过程中，加一个功能重启一次加一个功能重启一次，有了这个插件方便很多。</p><p><a href="https://blog.csdn.net/HLH_2021/article/details/119250511">Idea之热部署插件JRebel+XRebel</a></p>）<h3 id="更改设置"><a href="#更改设置" class="headerlink" title="更改设置"></a>更改设置</h3><p>编辑器——控制台：默认编码——UTF8</p><p>编辑器——文件编码：全局编码&amp;项目编码&amp;属性文件默认编码——UTF8</p><p>构建、执行、部署——编译器：勾选自动构建项目</p><p>编辑器——常规——自动导入：如图勾选</p><p>在<code>TrainApplication</code>类中随便写点什么，点右上角那个小火箭（<code>JRebel and XRebel</code>插件安装激活后会出现这个按键）</p><p>等待编译及控制台输出结束后（我将<code>hello2</code>改成了<code>hello</code>，所以图中控制台输出的是<code>hello2</code>）,修改部分代码。切换页面或者鼠标点一下任务栏，静等几秒、此时控制台出现如图样式代码就是热部署成功啦。</p><h3 id="代码关联Git远程仓库"><a href="#代码关联Git远程仓库" class="headerlink" title="代码关联Git远程仓库"></a>代码关联Git远程仓库</h3><h4 id="将代码交给本地Git管理"><a href="#将代码交给本地Git管理" class="headerlink" title="将代码交给本地Git管理"></a>将代码交给本地Git管理</h4><p>工具栏选择VCS——启用版本控制集成</p><p>选择Git（这里因为IDEA之前设置过，所以直接拉PyCharm过来参演，界面都是一样的）</p><p>之后IDEA左下角会出现一个Git按钮，点击后看到如图内容，本地更改——未进行版本管理的文件，标红表示本地尚未提交。</p><p>随后打开终端，设置git，输入自己的用户名和邮箱。</p><p>接着点击git——本地更改，右键，添加到VCS，此时红色都变绿了。然后提交文件。</p><p>在提交更改页面取消<code>分析代码</code>和<code>检查TODO</code>的勾选，提高提交速度，添加提交消息：初始化，点击提交。</p><p>提交后我们就能在日志页面看到我们的提交信息了。</p><h4 id="接下来关联远程仓库（GitHub，Gitee，阿里云效Codeup等等）"><a href="#接下来关联远程仓库（GitHub，Gitee，阿里云效Codeup等等）" class="headerlink" title="接下来关联远程仓库（GitHub，Gitee，阿里云效Codeup等等）"></a>接下来关联远程仓库（GitHub，Gitee，阿里云效Codeup等等）</h4><p>在git安装目录下(一般是<code>Program Files</code>)，打开cmd文件夹，打开<code>git-gui.exe</code>，点击<code>help</code>、<code>show ssh key</code>。复制SSH Key</p><p>我选择的是Github，在<code>settings</code>页面选择左侧<code>SSH and GPG keys</code>，<code>new ssh key</code>，填入信息，我已经添加过，就不再展示了（没注册过Github的先注册）</p><p>新建一个仓库，用来存放我们的代码，建好后可以看到这一部分，选择<code>SSH</code>，注意选择后命令变为<code>git@</code></p><p>逐行复制执行红框内命令</p><p>终端结果：</p><p>我们可以在日志看到远程分支</p><p>如果你之前关联过的话，输入命令：<code>git remote -v</code> </p><p>查看连接是否正确，如果不正确就删除原有的，然后重新执行一遍就好啦。</p><p>命令：<code>git remote rm origin</code></p><h3 id="member模块创建"><a href="#member模块创建" class="headerlink" title="member模块创建"></a>member模块创建</h3><p>在<code>train</code>目录下创建<code>member</code>模块，由Maven构建</p><p>创建成功后项目目录：</p><p>每次更改文件后都交给Git管理</p><p>将<code>train</code>目录下的<code>pom.xml</code>文件中<code>&lt;dependencies&gt;&lt;/dependeccies&gt;</code>内容剪切到<code>member</code>目录下<code>pom.xml</code>文件</p><p>新建包<code>cn.xiaoyv.train.member</code>。<code>cn.xiaoyv</code>——java推荐的包命名习惯：域名反写，自定义；<code>train</code>——项目名；<code>member</code>——模块名</p><p>随后重构<code>train\src\main\java</code>目录下的<code>TrainApplication.java</code>文件。</p><p>在<code>cn.xiaoyv.train.member</code>目录下创建<code>config</code>包,</p><p>将<code>TrainApplication.java</code>重命名为<code>MemberApplication.java</code>，放到<code>config</code>目录下，入乡随俗。</p><p>运行<code>MemberApplication.java</code>，确认控制台输出与我们写的代码一致</p><p>随后在<code>train.member</code>下添加<code>controller</code>模块，新建<code>TestController</code>类，添加代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line">    @GetMapping(&quot;/hello&quot;)</span><br><span class="line">    public String test() &#123;</span><br><span class="line">        System.out.println(&quot;Hello Test&quot;);  //在控制台输出</span><br><span class="line">        return &quot;Hello Test&quot;; //浏览器访问 http://localhost:8080/hello 在页面输出</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时直接运行浏览器访问会报错，因为<code>@SpringBootApplication</code>注解包含注解<code>@ComponentScan</code>，而<code>@ComponentScan</code>默认扫描同级及当前包下内容。</p><p>因此我们需要为<code>MemberApplication.java</code>文件添加以下注解，这样<code>cn.xiaoyv</code>目录下所有文件都可以被<code>@ComponentScan</code>扫描到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&quot;cn.xiaoyv&quot;) // 根据自己定义的目录调整</span><br></pre></td></tr></table></figure><p>以后看见<code>cn.xiaoyv</code>都记得改成自己设置的</p><p>此时访问<code>localhost:8080/hello</code>即可看到如下内容：</p><p>此时在原<code>train/src/main/resources</code>目录下还有一个<code>application.properties</code>文件</p><p>我们将它移动到<code>member</code>的<code>resources</code>内，选择添加配置（也可以不添加）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8001 </span></span><br></pre></td></tr></table></figure><p>指定端口号为8001，下次就要访问<code>localhost:8001/hello</code>才能看到输出</p><p>删除<code>train</code>目录下<code>src</code>文件夹，它的历史任务已经完成，就让它光荣下岗吧！</p><p>随后将train目录下<code>pom.xml</code>文件的plugins部分剪切到<code>member</code>的<code>pom.xml</code>文件内</p><p>完成操作后再次访问<code>localhost:8001</code>，确认输出无误后提交代码</p><p>提交时出现了分行隔符警告，这是因为不同操作系统（如Windows、Linux、Mac）使用不同的行分隔符来表示换行，Windows 使用 CRLF（Carriage Return + Line Feed），而 Linux 和 Mac 使用 LF（Line Feed）。</p><p>当团队中的开发者使用不同的操作系统时，可能会导致在代码库中混合存在不同的行分隔符，这可能会引发一些问题。Git提供了一个配置选项 core.autocrlf 将其设置为 true 时，Git会在提交代码时自动将行分隔符转换为统一的格式，选择修复并提交。</p><h3 id="添加日志功能"><a href="#添加日志功能" class="headerlink" title="添加日志功能"></a>添加日志功能</h3><p>启动日志：</p><p>将启动类<code>MemberApplication</code>内代码修改为如下内容：</p><p>代码块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    private static final Logger LOG = LoggerFactory.getLogger(MemberApplication.class);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication app = new SpringApplication(MemberApplication.class);</span><br><span class="line">        Environment env = app.run(args).getEnvironment();</span><br><span class="line">        LOG.info(&quot;启动成功!!&quot;);</span><br><span class="line">        LOG.info(&quot;测试地址:http:/127.0.0.1:&#123;&#125;/hello&quot;, env.getProperty(&quot;server.port&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">//此时就要配置server.port=8001 了</span><br></pre></td></tr></table></figure><p>这样在控制台就会输出“启动成功!!”与“测试地址”，复制粘贴到浏览器就可以查看效果</p><p>为了后续做路由转发，我们在<code>application.properties</code>文件中添加一行（单体应用加不加都行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/member</span><br></pre></td></tr></table></figure><p>这样在访问时，就更正为<code>http:/127.0.0.1:8001/member/hello</code></p><p>随后我们创建一个文件夹，用来保存日志</p><p>在<code>member</code>文件夹内<code>resources</code>目录下创建<code>logback-spring.xml</code>文件</p><p>在文件内粘贴如下代码：</p><p>注：这就是个日志的设置文件，不用记，所以只解释部分代码含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property name=&quot;PATH&quot; value=&quot;./log/member&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--  在train/log/member目录下创建日志文件   --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;Pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-30logger&#123;30&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n&lt;/Pattern&gt;</span><br><span class="line">            &lt;!--  LOG_ID：线程的流水号  --&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;TRACE_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">    &lt;!--  TRACE_FILE：所有日志  --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;PATH&#125;/trace.log&lt;/file&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;$&#123;PATH&#125;/trace.%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;layout&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;ERROR_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">    &lt;!--  ERROR_FILE：error日志  --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;PATH&#125;/error.log&lt;/file&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;$&#123;PATH&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;layout&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;ERROR&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;TRACE&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;TRACE_FILE&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>日志不需要交给Git管理，所以我们在<code>train</code>目录下的<code>.gitignore</code>文件最后添加<code>log/</code></p><p>这样Git就会自动忽略日志文件了，Ctrl+K 提交代码，提交信息：</p><p>修改启动日志，增加&#x2F;member模块，修改logback-spring.xml文件。提交！</p><h3 id="HTTP测试"><a href="#HTTP测试" class="headerlink" title="HTTP测试"></a>HTTP测试</h3><p>在之前的部分，我们每次运行程序后，都要打开浏览器复制粘贴地址来检查是否成功，有点麻烦。</p><p>这时我们就可以使用IDEA自带的HTTP客户端来进行测试</p><p>在<code>train</code>目录下创建文件夹<code>http</code>，在这个文件夹内新建一个<code>member-test.http</code>文件，http后缀一定要记得</p><p>输入快捷键gtr即可快速生成代码，将端口号与路径修改<code>localhost:8001/member/hello</code>。</p><p>运行程序，点击运行键，即可看到测试结果</p><p>提交代码，记为“增加http测试文件，方便成员测试”</p><h3 id="增加AOP打印请求参数和返回结果"><a href="#增加AOP打印请求参数和返回结果" class="headerlink" title="增加AOP打印请求参数和返回结果"></a>增加AOP打印请求参数和返回结果</h3><p>在实际Web项目中，我们通常都会在比如请求进来时或者返回后能够记录日志方便日后排查问题等。甚至有时候我们需要在内部的某些方法逻辑执行前、执行后做一些操作</p><p>比如：对参数进行解密，对所有的返回值进行加密等。而我们之前实现的日志并不能做到这些，因此这一节我们来增加一个AOP统一打印。</p><p>首先在<code>train.pom.xml</code>中添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.70&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后在<code>member.pom.xml</code>中添加依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>重新加载Maven项目</p><p>我们先写一个小东西，用于生成随机字符串，这个字符串目前先用做线程的流水号。</p><p>新建<code>train.member.util.RandomUtil.java</code>。添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static final Random random = new Random();</span><br><span class="line">    private static final String CHAR_SET = &quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;;</span><br><span class="line"></span><br><span class="line">    public static String randomString(int length) &#123;</span><br><span class="line">        StringBuilder randomString = new StringBuilder(length);</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            randomString.append(CHAR_SET.charAt(random.nextInt(CHAR_SET.length())));</span><br><span class="line">        &#125;</span><br><span class="line">        return randomString.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>正式内容：新建<code>train.member.aspect.LogAspect.java</code>。添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import cn.xiaoyv.train.member.util.RandomUtil;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.support.spring.PropertyPreFilters;</span><br><span class="line">import jakarta.servlet.ServletRequest;</span><br><span class="line">import jakarta.servlet.ServletResponse;</span><br><span class="line">import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.Signature;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.slf4j.MDC;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LogAspect &#123;</span><br><span class="line">    public LogAspect() &#123;</span><br><span class="line">        System.out.println(&quot;LogAspect&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final static Logger LOG = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 定义一个切点</span><br><span class="line">     */</span><br><span class="line">    @Pointcut(&quot;execution(public * cn.xiaoyv..*Controller.*(..))&quot;)</span><br><span class="line">    // 以后看见`cn.xiaoyv`都记得改成自己设置的，再强调一下</span><br><span class="line">    public void controllerPointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;controllerPointcut()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint) &#123;</span><br><span class="line"></span><br><span class="line">        MDC.put(&quot;LOG_ID&quot;, System.currentTimeMillis() + RandomUtil.randomString(3));</span><br><span class="line"></span><br><span class="line">        // 开始打印请求日志</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        String name = signature.getName();</span><br><span class="line"></span><br><span class="line">        // 打印请求信息</span><br><span class="line">        LOG.info(&quot;------------- 开始 -------------&quot;);</span><br><span class="line">        LOG.info(&quot;请求地址: &#123;&#125; &#123;&#125;&quot;, request.getRequestURL().toString(), request.getMethod());</span><br><span class="line">        LOG.info(&quot;类名方法: &#123;&#125;.&#123;&#125;&quot;, signature.getDeclaringTypeName(), name);</span><br><span class="line">        LOG.info(&quot;远程地址: &#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        // 打印请求参数</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        // LOG.info(&quot;请求参数: &#123;&#125;&quot;, JSONObject.toJSONString(args));</span><br><span class="line"></span><br><span class="line">        // 排除特殊类型的参数，如文件类型</span><br><span class="line">        Object[] arguments = new Object[args.length];</span><br><span class="line">        for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line">            if (args[i] instanceof ServletRequest</span><br><span class="line">                    || args[i] instanceof ServletResponse</span><br><span class="line">                    || args[i] instanceof MultipartFile) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            arguments[i] = args[i];</span><br><span class="line">        &#125;</span><br><span class="line">        // 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        PropertyPreFilters filters = new PropertyPreFilters();</span><br><span class="line">        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(&quot;请求参数: &#123;&#125;&quot;, JSONObject.toJSONString(arguments, excludefilter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;controllerPointcut()&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        Object result = proceedingJoinPoint.proceed();</span><br><span class="line">        // 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        PropertyPreFilters filters = new PropertyPreFilters();</span><br><span class="line">        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(&quot;返回结果: &#123;&#125;&quot;, JSONObject.toJSONString(result, excludefilter));</span><br><span class="line">        LOG.info(&quot;------------- 结束 耗时：&#123;&#125; ms -------------&quot;, System.currentTimeMillis() - startTime);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>http.member-test.http</code>，输出：</p><p>成功，绿色的部分就是目前设置的流水号。</p><p>提交：增加LogAspect，打印请求参数、返回结果及日志流水号</p><h3 id="添加commen模块"><a href="#添加commen模块" class="headerlink" title="添加commen模块"></a>添加commen模块</h3><p>为了提高代码复用率，新建一个<code>train.commen</code>模块，把会重复用到的代码放在这。依照下图结构创建：</p><p>将<code>member</code>模块的<code>LogAspect</code>类和<code>RandonUtil</code>类移动到<code>common</code>模块的对应目录下，在<code>common/pom.xml</code>中添加相应依赖</p><p>但目前这样并不能在member中添加common依赖，我们也就不能利用到common中的依赖。</p><p>Maven添加依赖是添加本地仓库中的，因此我们需要将新建的common模块安装到本地仓库。</p><p>打开Maven，刷新项目确认common已经成功加载。打开common的生命周期，执行<code>install</code>。</p><p>另外说明一下，通用模块如果没有添加任何新的依赖，在本项目中使用可以不再安装，但如果想在别的项目使用新功能，每次更新后就<code>install</code>。</p><p>几个常用项：</p><p><strong>clean</strong>：清理项目的工作目录，并为新的构建做准备。</p><p><strong>compile</strong>：编译项目的源代码。</p><p><strong>test</strong>：运行测试。</p><p><strong>package</strong>：将编译后的代码打包成可分发格式。</p><p><strong>install</strong>：将包安装到本地仓库，以供其他项目使用。</p><p>执行后面的生命周期，前面的默认执行。</p><p>最终显示：BUILD SUCCESS，我们就可以给<code>member</code>引入<code>common</code>啦。</p><p><strong>在member中引入依赖</strong>，填入正确坐标</p><p>因为member中要用到的依赖common都有，所以只添加一个common就可以了，多余的删掉</p><p>刷新maven项目，可以看到此时已经引入了common，而其他依赖项包含在common里</p><p>跑一下项目，再测一下http：</p><p>common模块添加成功，提交！新建common模块，包含配置文件和LogAspect类。</p><h3 id="添加网关模块"><a href="#添加网关模块" class="headerlink" title="添加网关模块"></a>添加网关模块</h3><p>网关模块用来做路由转发</p><p>新建<code>gateway</code>模块，添加依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>添加启动类<code>GatewayApplication</code>，从<code>member</code>复制一份过来就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOG.info(&quot;网关地址:http:/127.0.0.1:&#123;&#125;&quot;, env.getProperty(&quot;server.port&quot;)); //调整一下输出</span><br></pre></td></tr></table></figure><p>随后是<code>application.properties</code>和<code>logback-spring.xml</code>，日志配置同样是复制一份。</p><p>不过在前面我们添加日志功能的时候，说明过日志的存放目录，复制过来后调整为<code>/log/gateway</code>，各个模块日志存在对应文件夹</p><p><code>application.properties</code>把端口设为<code>8000</code>。跑一下，没bug</p><p>在<code>application.properties</code>中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.gateway.routes[0].id=member</span><br><span class="line">spring.cloud.gateway.routes[0].uri=http://127.0.0.1:8001</span><br><span class="line">spring.cloud.gateway.routes[0].predicates[0]=Path=/member/**</span><br></pre></td></tr></table></figure><p>三行配置的含义：</p><p>定义了一个ID为<code>member</code>的路由。</p><p>设置了目标服务的地址为<code>http://127.0.0.1:8001</code>。</p><p>定义了一个谓词，用于匹配所有以<code>/member/</code>开头的请求路径。</p><p>当一个HTTP请求到达Spring Cloud Gateway，并且请求路径以<code>/member/</code>开始时，</p><p>网关将根据这个路由配置将请求转发到<code>http://127.0.0.1:8001</code></p><p>启动<code>GateawayApplication</code>，启动<code>MemberApplication</code></p><p>测试<code>8000</code>端口，返回<code>member</code>，网关模块完成！提交</p><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>新建数据库<code>train_member</code>，新建用户<code>train_member</code></p><p>为用户<code>train_member</code>添加数据库<code>train_member</code>库的管理权限，都勾上就行了</p><p>IDEA连接数据库，数据源——MySQL，输入用户名密码（用户<code>train_member</code>和你刚才设置的密码）</p><p>连接数据库<code>train_member</code>，测试连接，成功。</p><p>在<code>train_member</code>数据库里执行以下内容，等会测试用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use `train_member`;</span><br><span class="line">drop table if exists `member`;</span><br><span class="line">create table `member`(</span><br><span class="line">`id` BIGINT NOT NULL COMMENT &#x27;id&#x27;,</span><br><span class="line">`mobile` VARCHAR(15) COMMENT &#x27;联系电话&#x27;,</span><br><span class="line">PRIMARY KEY (`id`),</span><br><span class="line">UNIQUE KEY `mobile_unique` (`mobile`)</span><br><span class="line">)engine=INNODB default charset=utf8mb4 COMMENT &#x27;用户&#x27;;</span><br></pre></td></tr></table></figure><h3 id="Mybatis持久层"><a href="#Mybatis持久层" class="headerlink" title="Mybatis持久层"></a>Mybatis持久层</h3><p>引入相关依赖，分两步</p><p>一、在<code>train.pom.xml</code>里加上有版本号的。</p><p>二，<code>member.pom.xml</code>加上没版本号的。</p><p>之后就不提这个，但是操作的时候不能忘。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.5.14&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">            </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.22&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>接下来是配置文件，<code>member.application.properties</code>添加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8001</span><br><span class="line">server.servlet.context-path=/member</span><br><span class="line"></span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/train_member?serverTimezone=UTC   # 数据库url</span><br><span class="line">spring.datasource.username=train_member   # 连接数据库的用户名</span><br><span class="line">spring.datasource.password=train    # 密码</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver   # 数据库驱动完整类名</span><br><span class="line">mybatis.mapper-locations=classpath:/mapper/**/*.xml   # MyBatis框架中Mapper XML文件的位置</span><br><span class="line">logging.level.cn.xiaoyv.train.member.mapper=trace   # 日志级别</span><br></pre></td></tr></table></figure><p>添加刚才提到的MyBatis框架中Mapper XML文件，依照如图结构，添加对应文件</p><p>mapper&#x2F;MemberMapper.xml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;cn.xiaoyv.train.member.mapper.MemberMapper&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;count&quot; resultType=&quot;integer&quot;&gt;</span><br><span class="line">        select count(1) from member;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>MemberApplication：</p><p>在<code>@ComponentScan(&quot;cn.xiaoyv&quot;)</code>后再添加一个注解：</p><p><code>@MapperScan(&quot;cn.xiaoyv.train.member.mapper&quot;)</code>，就是刚才新建的mapper目录位置</p><p>MemberController：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/member&quot;)</span><br><span class="line">public class MemberController &#123;</span><br><span class="line"></span><br><span class="line">    public final MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    public MemberController(MemberMapper memberMapper) &#123;</span><br><span class="line">        this.memberMapper = memberMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/count&quot;)</span><br><span class="line">    public int count() &#123;</span><br><span class="line">        return memberMapper.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemberMapper：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface MemberMapper &#123;</span><br><span class="line">    Integer count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemberService：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MemberService &#123;</span><br><span class="line">    @Autowire</span><br><span class="line">    public MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    public int count()&#123;</span><br><span class="line">        return memberMapper.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<code>http://localhost:8001/member/member/count</code></p><p>返回的值是数据库里有几组数据，看你给里面加了多少，我只加了一条</p><p>成功，提交，集成Mybatis持久层框架</p><h3 id="集成Mybatis官方生成器"><a href="#集成Mybatis官方生成器" class="headerlink" title="集成Mybatis官方生成器"></a>集成Mybatis官方生成器</h3><p>上一步我们完成了Mybatis的一些基础代码，虽然说都是CV，但是以后变了需求还得一个一个改，比较麻烦。所以咱们这节搞个代码生成器，这种重复性工作就交给插件。</p><p>先创建一个模块<code>generator</code>，再添加<code>generator-config-member.xml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;context id=&quot;Mysql&quot; targetRuntime=&quot;MyBatis3&quot; defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span><br><span class="line">        &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--覆盖生成XML文件--&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot; /&gt;</span><br><span class="line">        &lt;!-- 生成的实体类添加toString()方法 --&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 不生成注释 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/train_member?serverTimezone=UTC&quot;</span><br><span class="line">                        userId=&quot;train_member&quot;</span><br><span class="line">                        password=&quot;train&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetProject=&quot;../member/src/main/java&quot;</span><br><span class="line">                            targetPackage=&quot;cn.xiaoyv.train.member.domain&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetProject=&quot;../member/src/main/resources&quot;</span><br><span class="line">                         targetPackage=&quot;mapper&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span><br><span class="line">        &lt;javaClientGenerator targetProject=&quot;../member/src/main/java&quot;</span><br><span class="line">                             targetPackage=&quot;cn.xiaoyv.train.member.mapper&quot;</span><br><span class="line">                             type=&quot;XMLMAPPER&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table tableName=&quot;member&quot; domainObjectName=&quot;Member&quot;/&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p>如果第四行<code>http://mybatis.....dtd</code>爆红，我们就要添加一个文件。</p><p>打开这个网址，自动下载文件，将下载的文件放到一个目录下，然后打开IDEA设置，找到<code>语言和框架</code>——<code>架构和DTD</code></p><p>添加，url就是这个链接，文件选择刚才下载那个，重新加载一下项目</p><p>看到插件已经添加进来，随后运行插件。警告不用管，意思是文件存在，它生成文件覆盖了原有的，这也是我们要注意的地方，对于生成器生成的文件，我们都不要动，不要在里面添加代码。即使添加成功，以后需求改变重新生成我们写的就没了。自己写的代码放别的地方</p><p>如果你之前和我操作的过程一样，那么此时<code>MemberContorller</code>和<code>MemberService</code>应该都爆红了，因为我们生成的代码里没有之前用到的<code>count</code>方法，此时就要改为生成的<code>countByExample</code>方法</p><p>打开<code>MemberMapper</code>，可以看到一个方法：<code>long countByExample(MemberExample example);</code>long类型，而我们之前在<code>Contorller</code>和<code>Service</code>里的返回值都是int，再加上<code>countByExample</code>还有一个参数，改！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int count()&#123;</span><br><span class="line">    return Math.toIntExact(memberMapper.countByExample(null));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><p>提交：集成Mybatis官方生成器</p><h3 id="完成注册接口"><a href="#完成注册接口" class="headerlink" title="完成注册接口"></a>完成注册接口</h3><p>先添加一个依赖：hutool</p><blockquote><p>关于这个依赖我斟酌了几天，其实在前面的AOP打印请求那块我们写了一个<code>RandomUtil.java</code>，为了生成一个随机序列。</p><p>在这块原本可以直接用hutool，但是又考虑到一些大公司不让用这个东西。大部分计算机专业的学生毕业是想进大厂的，一些开发规范什么的向大厂看齐也没什么问题。</p><p>现在我想了想，还是先用着吧，先图个方便，一个hutool判不了“死刑”。相比于大厂的开发规范，还是个人的实际能力更重要，只要你够牛逼，用啥都是有道理的，嗯。</p></blockquote><p>依赖，<code>train&amp;member</code>，<code>common</code>用不用随意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.8.27&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>处理注册请求：</p><p>首先，注册的方式是通过手机号注册，那么注册前就查一下这个手机号有没有注册过。所以我们要创建一个 <code>MemberExample</code> 对象来构建查询条件，通过<code>andMobileEqualTo</code> 方法将查询条件设置为匹配传入的手机号 <code>mobile</code>。</p><pre><code>MemberExample memberExample = new MemberExample();memberExample.createCriteria().andMobileEqualTo(mobile);</code></pre><p>接下来检查手机号是否已存在使用， <code>memberMapper.selectByExample</code> 方法执行查询，获取所有手机号与传入参数相匹配的成员列表 <code>membersList</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Member&gt; membersList = memberMapper.selectByExample(memberExample);</span><br></pre></td></tr></table></figure><p>如果存在，返回手机号已注册，抛出一个异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(CollUtil.isNotEmpty(membersList))&#123;</span><br><span class="line">    throw new RuntimeException(&quot;手机号已注册&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果不存在，创建一个新的<code>Member</code>对象，设置其<code>id</code>为当前时间戳（以毫秒为单位），设置其<code>mobile</code>为传入的手机号，然后调用<code>memberMapper.insert</code>方法将这个新成员插入到数据库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Member member = new Member();</span><br><span class="line">member.setId(System.currentTimeMillis());</span><br><span class="line">member.setMobile(mobile);</span><br><span class="line">memberMapper.insert(member);</span><br></pre></td></tr></table></figure><p>返回新创建成员的ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return member.getId();</span><br></pre></td></tr></table></figure><p>最后看一下完整<code>MemberService</code>类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MemberService&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    public int count()&#123;</span><br><span class="line">        return Math.toIntExact(memberMapper.countByExample(null));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long register(String mobile)&#123;</span><br><span class="line"></span><br><span class="line">        MemberExample memberExample = new MemberExample();</span><br><span class="line">        memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">        List&lt;Member&gt; membersList = memberMapper.selectByExample(memberExample);</span><br><span class="line"></span><br><span class="line">        if(CollUtil.isNotEmpty(membersList))&#123;</span><br><span class="line">            throw new RuntimeException(&quot;手机号已注册&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Member member = new Member();</span><br><span class="line">        member.setId(System.currentTimeMillis());</span><br><span class="line">        member.setMobile(mobile);</span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        return member.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在Controller里加上请求处理方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/register&quot;)</span><br><span class="line">public long register(String mobile)&#123;</span><br><span class="line">    return memberService.register(mobile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了吗？哎，其实还差一个异常处理，等会再处理。</p><p>提交：注册功能，未添加注册失败处理</p><h3 id="封装请求参数和返回结果"><a href="#封装请求参数和返回结果" class="headerlink" title="封装请求参数和返回结果"></a>封装请求参数和返回结果</h3><p>在原本的<code>MemberController</code>中，我们已经实现了两个方法，一个返回<code>int</code>，一个返回<code>long</code>。这也就意味着前端要对这两个不同的类型做对应的处理，并且有很多重复的工作。一个两个还好说，几十个就很让人抓狂了。为了应对这种情况，这一节来完成封装请求参数和返回结果。</p><p>返回类：</p><p>通用模块里添加<code>respond/CommonRespond.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">cn/xiaoyv/train/common/respond/CommonRespond.java</span><br><span class="line"></span><br><span class="line">public class CommonRespond&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    //业务上的成功或失败</span><br><span class="line">    private boolean success = true;</span><br><span class="line"></span><br><span class="line">    //返回信息</span><br><span class="line">    private String message;</span><br><span class="line"></span><br><span class="line">    //返回泛型数据，自定义类型</span><br><span class="line">    private T content;</span><br><span class="line"></span><br><span class="line">    public CommonRespond() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public CommonRespond(T content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean getSuccess() &#123;</span><br><span class="line">        return success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSuccess(boolean success) &#123;</span><br><span class="line">        this.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMessage() &#123;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMessage(String message) &#123;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setContent(T content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        final StringBuffer sb = new StringBuffer(&quot;CommonResp&#123;&quot;);</span><br><span class="line">        sb.append(&quot;success=&quot;).append(success);</span><br><span class="line">        sb.append(&quot;, message=&#x27;&quot;).append(message).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">        sb.append(&quot;, content=&quot;).append(content);</span><br><span class="line">        sb.append(&#x27;&#125;&#x27;);</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类就包含了简单的返回信息，以后做修改也方便。</p><p>另外这个success指的是业务上的成功与否，不是直接的异常信息。</p><p>再搞一个请求处理类，这个放在<code>member</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.xiaoyv.train.member.request;</span><br><span class="line"></span><br><span class="line">public class MemberRegisterRequest &#123;</span><br><span class="line"></span><br><span class="line">    private String mobile;</span><br><span class="line"></span><br><span class="line">    public String getMobile() &#123;</span><br><span class="line">        return mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMobile(String mobile) &#123;</span><br><span class="line">        this.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;MemberRegisterRequest&#123;&quot; +</span><br><span class="line">                &quot;mobile=&#x27;&quot; + mobile + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个类写好了，现在把<code>Controller</code>和<code>Service</code>的内容根据类型修改即可</p><p>Controller：</p><p>函数返回类型改为<code>CommonRespond&lt;T&gt;</code>，new一个<code>CommonRespond</code>对象，将变量传递给这个方法，最后返回。</p><p>还有一种无参构造写法，<code>return new CommonRespond&lt;&gt;(register)</code>，一行写完，逻辑上是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/count&quot;)</span><br><span class="line">public CommonRespond&lt;Integer&gt; count() &#123;</span><br><span class="line">    int count = memberService.count();</span><br><span class="line">    CommonRespond&lt;Integer&gt; commonRespond = new CommonRespond&lt;&gt;();</span><br><span class="line">    commonRespond.setContent(count);</span><br><span class="line">    return commonRespond;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;/register&quot;)</span><br><span class="line">public CommonRespond&lt;Long&gt; register(MemberRegisterRequest request)&#123;</span><br><span class="line">    long register = memberService.register(request);</span><br><span class="line">    /*</span><br><span class="line">    无参构造</span><br><span class="line">    CommonRespond&lt;Long&gt; commonRespond = new CommonRespond&lt;&gt;();</span><br><span class="line">    commonRespond.setContent(register);</span><br><span class="line">    */</span><br><span class="line">    //有参构造</span><br><span class="line">    return new CommonRespond&lt;&gt;(register);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在<code>Service</code>里修改一下<code>String mobile</code>，使用我们的<code>MemberRegisterRequest</code>类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public long register(MemberRegisterRequest request)&#123;</span><br><span class="line">   String mobile = request.getMobile();</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8001/member/member/register</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=(一个新号码)</span><br></pre></td></tr></table></figure><p>成功，提交</p><h3 id="统一异常响应结构"><a href="#统一异常响应结构" class="headerlink" title="统一异常响应结构"></a>统一异常响应结构</h3><p>在十四节最后，我们没有处理注册失败这个异常，现在我们来解决它，把正常和异常统一到一种格式。</p><p>在<code>common</code>模块添加<code>controller.ControllerException.java</code>类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class ControllerException &#123;</span><br><span class="line"></span><br><span class="line">    public static final Logger LOG = LoggerFactory.getLogger(ControllerException.class);</span><br><span class="line">    @ExceptionHandler(value = Exception.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public CommonRespond exceptionHandler(Exception e) throws Exception &#123;</span><br><span class="line">        CommonRespond commonRespond = new CommonRespond&lt;&gt;();</span><br><span class="line">        LOG.error(&quot;系统异常&quot;, e);</span><br><span class="line">        commonRespond.setSuccess(false);</span><br><span class="line">        commonRespond.setMessage(&quot;系统异常，请联系管理员&quot;);</span><br><span class="line">        return commonRespond;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以看到统一格式的响应了</p><p>提交。</p><h3 id="自定义处理异常业务"><a href="#自定义处理异常业务" class="headerlink" title="自定义处理异常业务"></a>自定义处理异常业务</h3><p>上一节统一了响应格式，接下来处理程序本身的一些问题</p><p>将<code>MemberServices</code>里的<code>member.setId(System.currentTimeMillis())</code>改成<code>member.setId(1L)</code>，此时运行程序就会报错。</p><p>首先创建一个枚举类<code>BusinessExceptionEnum</code>，把我们会响应的文字信息填进去，放在<code>common</code>模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public enum BusinessExceptionEnum &#123;</span><br><span class="line">    MEMBER_MOBILE_EXIST(&quot;手机号已注册&quot;);</span><br><span class="line"></span><br><span class="line">    private String description;</span><br><span class="line"></span><br><span class="line">    BusinessExceptionEnum(String description) &#123;</span><br><span class="line">        this.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDescription(String description) &#123;</span><br><span class="line">        this.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;BusinessExceptionEnum&#123;&quot; +</span><br><span class="line">                &quot;description=&#x27;&quot; + description + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建业务异常类<code>BusinessException</code>，继承<code>RuntimeException</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class BusinessException extends RuntimeException &#123;</span><br><span class="line">    private BusinessExceptionEnum e;</span><br><span class="line"></span><br><span class="line">    public BusinessException(BusinessExceptionEnum e) &#123;</span><br><span class="line">        this.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BusinessExceptionEnum getE() &#123;</span><br><span class="line">        return e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setE(BusinessExceptionEnum e) &#123;</span><br><span class="line">        this.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Throwable fillInStackTrace() &#123;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再为<code>ControllerException</code>添加业务异常的对应内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(value = BusinessException.class)</span><br><span class="line">@ResponseBody</span><br><span class="line">public CommonRespond exceptionHandler(BusinessException e) &#123;</span><br><span class="line">    CommonRespond commonRespond = new CommonRespond&lt;&gt;();</span><br><span class="line">    LOG.error(&quot;业务异常：&#123;&#125;&quot;, e.getE().getDescription());</span><br><span class="line">    commonRespond.setSuccess(false);</span><br><span class="line">    commonRespond.setMessage(e.getE().getDescription());</span><br><span class="line">    return commonRespond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不用写<code>throws Exception</code>抛出了，系统异常也不用写</p><p>最后将<code>MemberService register</code>方法里的if内容修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(CollUtil.isNotEmpty(membersList))&#123;</span><br><span class="line">    throw new BusinessException(BusinessExceptionEnum.MEMBER_MOBILE_EXIST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一个已注册号码，控制台报错只有一行，且响应格式正常：</p><p>提交</p><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>目前我们对输入参数是没有校验的，注册应当对输入校验，手机号不能为空</p><p>引入验证或校验功能的依赖——Jakarta Bean Validation，在common里添加下依赖就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>MemberRegisterRequest.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@NotBlank(message = &quot;手机号不能为空&quot;)</span><br><span class="line">private String mobile;  //mobile前加个注解</span><br></pre></td></tr></table></figure><p>MemberController.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public CommonRespond&lt;Long&gt; register(@Valid MemberRegisterRequest request)&#123;</span><br><span class="line">    long register = memberService.register(request);  //@Valid用来触发校验</span><br><span class="line">    return new CommonRespond&lt;&gt;(register);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ControllerException.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//手动添加</span><br><span class="line">import org.springframework.validation.BindException;</span><br><span class="line"></span><br><span class="line">//校验异常</span><br><span class="line">@ExceptionHandler(value = BindException.class)</span><br><span class="line">@ResponseBody</span><br><span class="line">public CommonRespond exceptionHandler(BindException e) &#123;</span><br><span class="line">    CommonRespond commonRespond = new CommonRespond();</span><br><span class="line">    LOG.error(&quot;校验异常：&#123;&#125;&quot;, e.getBindingResult().getAllErrors().get(0).getDefaultMessage());</span><br><span class="line">    commonRespond.setSuccess(false);</span><br><span class="line">    commonRespond.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());</span><br><span class="line">    return commonRespond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：mobile不赋值</p><p>这个时候就可以看到返回了校验信息</p><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>前面我们使用了一个时间戳来当作ID，但面对短时间大量请求——也就是高并发、就会出现ID重复。</p><p>所以我们需要修改ID生成策略，保证不重复。雪花算法就可以满足我们的需求，来了解一下吧。</p><p>雪花算法的核心思想是将一个64位的长整型ID分割为多个部分，每个部分代表不同的信息：</p><ol><li><strong>时间戳</strong>（1位 + 41位）：占用41位，用来记录生成ID的时间。由于只占用了41位，所以它支持的时间范围是从1970年1月1日00:00:00到2286年12月31日23:47:07。</li><li><strong>数据中心ID</strong>（5位）：用来区分不同的数据中心，可以支持最多2^5&#x3D;32个数据中心。</li><li><strong>机器ID</strong>（5位）：用来区分同一个数据中心内的不同机器，可以支持最多2^5&#x3D;32个机器。</li><li><strong>序列号</strong>（12位）：用来在同一个毫秒内生成不同的ID。一个机器在同一毫秒内可以生成2^12&#x3D;4096个不同的ID。</li></ol><p>同一毫秒的ID数量 &#x3D; 1024 X 4096 &#x3D; 4194304</p><p>新增<code>common.util.SnowUtil.java</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SnowUtil &#123;</span><br><span class="line">    private static long dataCenterId = 1;  //数据中心</span><br><span class="line">    private static long workerId = 1;     //机器标识</span><br><span class="line"></span><br><span class="line">    public static long getSnowflakeNextId() &#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId, dataCenterId).nextId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getSnowflakeNextIdStr() &#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId, dataCenterId).nextIdStr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MemberService：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Member member = new Member();</span><br><span class="line">member.setId(SnowUtil.getSnowflakeNextId());</span><br><span class="line">member.setMobile(mobile);</span><br></pre></td></tr></table></figure><p>最后测试一下：</p><p>提交。</p><h4 id="时间回拨问题"><a href="#时间回拨问题" class="headerlink" title="时间回拨问题"></a>时间回拨问题</h4><p>在获取时间的时候，可能会出现<strong>时间回拨</strong>的问题，什么是时间回拨问题呢？就是服务器上的时间突然倒退到之前的时间。</p><ol><li>外界原因，把系统环境时间被修改。</li><li>有时不同的机器上需要同步时间，不同机器之间可能存在误差，那么就有可能出现时间回拨问题。</li></ol><p>时间回拨问题可能导致雪花算法生成重复的ID，因为算法依赖于时间戳来保证ID的唯一性。如果时间回拨发生，算法可能会生成与之前相同的时间戳，而序列号又可能重复，从而导致ID冲突。</p><p>解决方案</p><ol><li>回拨时间小的时候，不生成 ID，循环等待到时间点到达。</li><li>上面的方案只适合时钟回拨较小的，如果间隔过大，阻塞等待，肯定是不可取的，因此要么超过一定大小的回拨直接报错，拒绝服务，或者利用拓展位，回拨之后在拓展位上加1就可以了，这样ID依然可以保持唯一。但是这个要求我们提前预留出位数，要么从机器ID中，要么从序列号中，腾出一定的位，在时间回拨的时候，这个位置+1。</li></ol><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
      <categories>
          
          <category> Springboot3-微服务12306 </category>
          
          <category> 微服务初始搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 12306 </tag>
            
            <tag> Spring Boot 3.0.0 </tag>
            
            <tag> JDK 17 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot注解</title>
      <link href="/2024/05/22/spring/"/>
      <url>/2024/05/22/spring/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot注解学习</p><span id="more"></span><p>在学习SpringBoot注解之前，咱们先简单学一下Java注解</p><h3 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h3><p>注解首次出现在Java1.5，是Java编程语言中的一种元数据机制，提供了一种向源代码中添加额外信息的方式。这些信息并不直接影响程序的执行逻辑，但可以被编译器、开发工具和其他程序在编译时、运行时或部署时解析和使用，以实现特定的目的。</p><p>Java 定义了11个注解，6个在<code>java.lang</code>，5个在<code>java.lang.annotation</code></p><p><code>java.lang</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override  //指示正在重写父类中的方法。</span><br><span class="line">@Deprecated  //标记类、方法、变量等已经被弃用。</span><br><span class="line">@SuppressWarnings  //关闭编译器的警告信息。</span><br><span class="line">@SafeVarargs  //指示可变参数是安全的，即不会对运行时类型检查造成影响。</span><br><span class="line">@FunctionalInterface  //指示一个接口是一个函数式接口，即只包含一个抽象方法的接口。</span><br><span class="line">@Native  //指示一个方法是一个本地方法，即该方法的实现是用非 Java 语言写的。</span><br></pre></td></tr></table></figure><p><code>java.lang.annotation</code>：</p><p>这一部分的注解也叫做元注解——作用在其他注解的注解。</p><p><strong>@Documented：</strong>为其他注解添加该注解后就会把其他注解写进<code>JavaDoc</code>文档，不仅能够看到使用注解的元素，还能看到注解的属性及其值。</p><p><strong>@Retention：</strong>标识注解的保存策略，有三个参数<code>SOURCE、CLASS、RUNTIME</code>。</p><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Retention &#123;</span><br><span class="line">    RetentionPolicy value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Documented</code>标识这个注解应该被包含在JavaDoc中</p><p><code>@Retention</code>参数为<code>RUNTIME</code>，在<code>Retention</code>注解内部定义了一个<code>RetentionPolicy</code>类型值<code>value()</code>，能且仅能传入一个参数。</p><p><code>RetentionPolicy</code>为枚举类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum RetentionPolicy &#123;</span><br><span class="line">    SOURCE,   //注解仅在源代码中存在，在编译时就会被丢弃，不会保留在JVM中。</span><br><span class="line">    CLASS,   //注解在源代码和字节码文件中都存在，但在运行时JVM会丢弃。</span><br><span class="line">    RUNTIME //注解在源代码、字节码文件和运行时JVM中都存在。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Target：</strong> 定义注解可以标识在哪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注解内部声明了一个<code>ElementType</code>的数组，也就意味着可以传多个参数</p><p><code>ElementType</code>枚举类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public enum ElementType &#123;</span><br><span class="line">    TYPE,//可以应用于类、接口（包括注解类型）、枚举或记录（record，Java16引入的新特性）的声明。</span><br><span class="line">    FIELD,//注解可以应用于字段声明，包括枚举常量。</span><br><span class="line">    METHOD,//可以应用于方法声明。</span><br><span class="line">    PARAMETER,//可以应用于参数声明。</span><br><span class="line">    CONSTRUCTOR,//可以应用于构造器声明。</span><br><span class="line">    LOCAL_VARIABLE,//应用于局部变量的声明。</span><br><span class="line">    ANNOTATION_TYPE,//注解类型</span><br><span class="line">    PACKAGE,////应用于包声明。</span><br><span class="line">    TYPE_PARAMETER,//应用于类型参数声明（Java8引入）</span><br><span class="line">    TYPE_USE,//任何类型</span><br><span class="line">    MODULE,//模块声明（Java9引入）</span><br><span class="line">    RECORD_COMPONENT; //应用于记录组件声明（Java16引入）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Inherited：</strong>标记注解为可继承的，继承最简单的作用就是简化操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里继承只能继承被标注的注解，标记注解本身继承的也无法继承。举个栗子：</p><p><code>SpringBootApplication</code>有<code>@Inherited</code>注解，而<code>MapperScan</code>没有</p><p>那么我们创建一个注解，<code>SpringBootApplication</code>便可以继承，但<code>MapperScan</code>不可以，包括其他在<code>SpringBootApplication</code>中继承的其他注解也无法被继承。</p><p>如图所示：</p><p>同时，在类和子类的继承上，被@Inherited标识的注解标识的类，它的直接或间接子类也会继承这个注解。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.annotation.Inherited;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">@Inherited</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@interface Annotation &#123; &#125;</span><br><span class="line"></span><br><span class="line">@Annotation</span><br><span class="line">class A&#123; &#125;</span><br><span class="line">class B extends A&#123; &#125;</span><br><span class="line">class C extends B&#123; &#125;</span><br><span class="line">class D&#123; &#125;</span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(A.class.isAnnotationPresent(Annotation.class));</span><br><span class="line">        System.out.println(B.class.isAnnotationPresent(Annotation.class));</span><br><span class="line">        System.out.println(C.class.isAnnotationPresent(Annotation.class));</span><br><span class="line">        System.out.println(D.class.isAnnotationPresent(Annotation.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<code>true true true false</code>。即都继承了<code>@Annotation</code></p><p>总结：能不能继承只看有没有被<code>@Inherited</code>标记……吗？</p><p>让我们再考虑一些东西：</p><p>1、注解仅在<code>SOURCE</code>——源码级别保留</p><p>2、注解在<code>CLASS</code>——字节码中保留</p><p>3、Spring框架中，当<code>MyController</code>类被<code>@Controller</code>注解标记时，<code>MyController</code>的子类也是控制器吗？</p><p>我们一个一个来考虑：</p><p>1、在源码级别保留——假如有一个注解<code>@A</code>，它只在源码中保留，那么注解在被编译成字节码后注解还在吗？</p><p>​答：不在了，因为它标注了仅在源码级别保留。而JVM执行的是字节码，此时注解就没有了。</p><p>2、在字节码中保留——虽然没有保留到JVM，但在<code>.class</code>文件中是可见的，也就意味着在类加载到JVM之前，可以使用各种工具或库来分析这些注解。</p><p>3、<code>MyController</code>的子类也是控制器。在<code>Spring</code>的上下文中，<code>Spring</code>会模拟一种继承行为，即使在标准的Java反射中这并不成立。</p><p>结论：能不能继承还要考虑其他因素，只看有没有被<code>@Inherited</code>标记这句话并不完全对。在Java反射API 中，只有<code>RUNTIME</code>级别的注解才能在运行时被检测到，并且只有当这些注解被标记为<code>@Inherited</code>时，它们才可能表现为“继承”。</p><p><strong>@Repeatable：</strong>这个注解于Java8引入。作用为允许在同一个声明（如类、方法、参数等）上使用同一个注解多次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Repeatable &#123;</span><br><span class="line">    Class&lt;? extends Annotation&gt; value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个参数<code>value</code>，属性的类型是类，这个类是 <code>Annotation</code> 类型的扩展，并且使用了通配符 <code>?</code> 来表示这个类可以是任何注解类型的类。</p><p><code>@Repeatable</code>注解自身必须用在另一个注解上，指明这个注解是可重复的，并指定一个容器注解类型，用于聚合重复的注解实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个可重复的注解</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@interface A &#123;</span><br><span class="line">    String value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个容器注解，用于聚合重复注解A</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Repeatable(Annotation.class)</span><br><span class="line">@interface Annotation &#123;</span><br><span class="line">    A[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用可重复注解</span><br><span class="line">public class MyClass &#123;</span><br><span class="line">    @A(&quot;A1&quot;)</span><br><span class="line">    @A(&quot;A2&quot;)</span><br><span class="line">    public void myMethod() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元注解就简单学习到这里，接下来我们开始<code>SpringBoot</code>常用注解的学习。</p><h3 id="SpringBoot常用"><a href="#SpringBoot常用" class="headerlink" title="SpringBoot常用"></a>SpringBoot常用</h3><p>这一部分我会为用到的注解贴个截图，一起回忆下上一节中我们在哪里用到了这个注解。</p><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p>最重要的注解，标记主应用程序类。</p><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan (excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line">public @interface SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><p>除开四个元注解，<code>SpringBootApplication</code>还有三个注解：</p><p><strong>@SpringBootConfiguration</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Configuration</span><br><span class="line">@Indexed</span><br><span class="line">public @interface SpringBootConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p>哎，没有<code>@Inherited</code>，这个还用可以标识注解，是我们刚才学的有问题吗？</p><p>刚才讲到的是<code>Java</code>中的情况，现在我们学习的是<code>SpringBoot</code>，有一点点差别。</p><p>在<code>SpringBoot</code>框架中，有一些为<code>SpringBoot</code>应用程序提供了元数据和配置信息的注解，他们可以看作<code>SpringBoot</code>的“元注解”，<code>@SpringBootConfiguration</code>和<code>@ComponentScan</code>便属于这一类。<code>@Indexed</code>优化查询性能的，可以用做元注解。</p><p>那么现在我们就知道<code>@SpringBootConfiguration</code>组合了<code>@Configuration</code>注解，实现配置文件的功能。再往上就不细究了。</p><p><strong>@EnableAutoConfiguration</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(AutoConfigurationImportSelector.class)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p>启用<code>SpringBoot</code>的自动配置机制，根据添加的依赖自动配置<code>Spring</code>应用。</p><p><strong>@ComponentScan</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Documented</span><br><span class="line">@Repeatable(ComponentScans.class)</span><br><span class="line">public @interface ComponentScan &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>Spring</code>组件扫描功能，让<code>SpringBoot</code>扫描到<code>Configuration</code>类并把它加入到程序上下文。</p><p><code>@SpringBootApplication</code>结合了以上注解，提供了<code>SpringBoot</code>应用的标准配置。</p><h4 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h4><p>到这就能简单点了，<code>SpringBootApplication</code>是最重要的注解，所以篇幅比较长。</p><p><code>@Service</code>用于标记业务逻辑层（Service层）的类，将其纳入<code>Spring</code>容器管理，便于依赖注入和<code>AOP</code>切面编程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br></pre></td></tr></table></figure><p>关于<code>@Component</code>：<code>Spring Framework</code>中的一个核心注解，用于定义一个受<code>Spring</code>容器管理的组件。当<code>@Component</code>注解添加到类上时，这个类就会被<code>Spring</code>识别为一个<code>Bean</code>。</p><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>通常用于处理HTTP请求并直接返回数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Controller</span><br><span class="line">@ResponseBody</span><br></pre></td></tr></table></figure><p>在<code>@Controller</code>中除开Java元注解只有一个<code>@Component</code>，所以比较<code>@RestController</code>和<code>@Controller</code>的差别我们可以简单地看看<code>@ResponseBody</code></p><p><code>@Target</code>为<code>TYPE,METHOD</code>，作用是返回值将直接作为HTTP响应正文返回。</p><p><code>@Controller</code>通常返回视图名称，需要视图解析器来渲染HTML视图。</p><h4 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h4><p>标记数据访问层类，如DAO（Data Access Object），用于封装对数据库或其他持久化存储的操作。</p><p>这个比较重要，但是咱们还没用到，等用到了再说</p><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p>用于字段、方法或构造函数，实现依赖注入，自动装配<code>Spring</code>容器管理的<code>Bean</code>。</p><p>源码里除了元注解也没别的就不贴代码了。</p><p><strong>@RequestMapping</strong></p><p>用于定义 HTTP 请求和控制器中处理方法之间的映射关系。</p><p>四种特化版：<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code></p><p>分别对应HTTP Get-Post-Put-Delete请求</p><h4 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h4><p> 在控制器类或<code>@ControllerAdvice</code>中定义全局或局部异常处理器方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Reflective(&#123;ExceptionHandlerReflectiveProcessor.class&#125;)</span><br></pre></td></tr></table></figure><p>这里出现了一个没提到的注解，去源码看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface Reflective &#123;&#125;</span><br></pre></td></tr></table></figure><p>指示被注释的元素需要反射。当直接出现或作为元注释出现时，该注释会触发针对已注释元素的配置处理器。默认情况下，会为带注释的元素注册反射提示，以便在必要时发现和调用该元素。</p><h4 id="Around-Aspect-Before"><a href="#Around-Aspect-Before" class="headerlink" title="@Around&#x2F;@Aspect&#x2F;@Before"></a>@Around&#x2F;@Aspect&#x2F;@Before</h4><p>AOP（面向切面编程）相关注解，用于定义切面、切点和通知，实现横切关注点的分离。</p><p><code>@Around</code>：方法级别注解，用于定义一个方法拦截器，允许在方法的执行前后添加逻辑，并且可以控制方法的执行流程。</p><p><code>@Aspect</code>：类级别注解，用于声明一个类为切面<code>aspect</code>。</p><p><code>@Before</code>：用于在某个方法执行之前执行一些代码。</p><h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h4><p>用于定义全局或特定的异常处理器和数据预处理方法，集中处理控制器层<code>Controller</code>的异常。</p><h4 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h4><p><code>MyBatis-Plus</code>或<code>MyBatis-Spring</code>等框架使用的注解，用于指定扫描<code>Mapper</code>接口的包路径。</p><h4 id="NotBlank"><a href="#NotBlank" class="headerlink" title="@NotBlank"></a>@NotBlank</h4><p>数据校验注解，用于确保字符串非空且非空白，或对象非null。</p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>简单说一下自定义注解的格式，使用<code>@interface</code>关键字定义，使用<code>default</code>关键字为注解成员提供默认值，可以使用元注解来提供关于注解本身的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">// 使用@Retention定义注解的保留策略</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">// 使用@Target定义注解可以用于哪些元素（如类、方法、变量等）</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">// 使用@Documented表明这个注解应该被Javadoc工具记录</span><br><span class="line">@Documented</span><br><span class="line">public @interface MyAnnotation &#123;</span><br><span class="line">    // 定义注解成员，可以有默认值</span><br><span class="line">    String value() default &quot;default value&quot;;</span><br><span class="line">    int number() default 10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用格式</span><br><span class="line">public class MyClass &#123;</span><br><span class="line"></span><br><span class="line">    @MyAnnotation(value = &quot;Hello&quot;, number = 5)</span><br><span class="line">    public void myMethod() &#123;</span><br><span class="line">        // 方法体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>这一章就简单学习了一下注解相关</p><p>元注解中关于继承——<code>@Inherited</code>学的很详细，因为查的时候查出来挺多内容的，就都记上了。</p><p><code>SpringBoot</code>中重点介绍了<code>@SpringBootApplication</code>这个最重要的注解，其他的都简单介绍了下。</p><p>未来还会使用到更多的注解，在实践中慢慢学习吧。</p>]]></content>
      
      
      <categories>
          
          <category> Springboot3-微服务12306 </category>
          
          <category> 注解学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java元注解 </tag>
            
            <tag> SpringBoot注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿12306 Part 00</title>
      <link href="/2024/05/22/12306_P0/"/>
      <url>/2024/05/22/12306_P0/</url>
      
        <content type="html"><![CDATA[<p>简单介绍及相关逻辑</p><span id="more"></span><h3 id="一、主要框架及版本"><a href="#一、主要框架及版本" class="headerlink" title="一、主要框架及版本"></a>一、主要框架及版本</h3><p>JDK：17</p><p>Spring Boot：3.0.0（Spring Boot 3最低支持JDK17）</p><p>Spring Cloud Alibaba：2022.0.0 </p><p>开发工具：IntelliJ IDEA 2023.2.3</p><h3 id="二、未来会涉及到的"><a href="#二、未来会涉及到的" class="headerlink" title="二、未来会涉及到的"></a>二、未来会涉及到的</h3><p>CDN，分布式缓存，两层验证码，限流，令牌，分布式锁，异步削峰，排队机制，分布式事务</p><h3 id="三、12306框架难点介绍"><a href="#三、12306框架难点介绍" class="headerlink" title="三、12306框架难点介绍"></a>三、12306框架难点介绍</h3><p>动态库存：例：T7次列车从北京到西安共经历“北京西——保定——石家庄北——太原——吕梁——延安——西安”共七站，但购票方式不唯一。如从北京西到太原，再从太原到西安，原本的一张票被拆为两张，故库存动态。</p><p>选座功能：同一趟车次的票还需添加座位信息（靠窗、过道…）。</p><p>线上线下同时提供服务。</p><p>抢票软件的持续刷票请求和不能超卖。</p><p>一天的请求量大概1600亿，平均180万&#x2F;秒，平均一年售出30亿张，高峰期日售票能力达到了2000万张。至于咱们写的这个、就别想太多，重在学习，能跑就行。</p><h3 id="四、模型设计与逻辑实现"><a href="#四、模型设计与逻辑实现" class="headerlink" title="四、模型设计与逻辑实现"></a>四、模型设计与逻辑实现</h3><h4 id="I、逻辑探索"><a href="#I、逻辑探索" class="headerlink" title="I、逻辑探索"></a>I、逻辑探索</h4><p>假设从A到E共有ABCDE五站，我们建立如下表格</p><table><thead><tr><th>座位</th><th>AB</th><th>BC</th><th>CD</th><th>DE</th></tr></thead><tbody><tr><td>1</td><td>已售-1</td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>那么当AB-1座车票出售后，AC、AD、AE的1座均已售，库存1张（2座），而不包含AB路段的1座票依旧可售，其余车票库存不变。</p><p>我们可以得出，当某一路段车票售出后，影响的是包含该路段的车票，库存数减一。这貌似是句废话?</p><p>那么此时我们思考一个问题，现在又售出了CD段车票，假如售出的是CD-1，库存如何？</p><p>假如售出的是CD-2，库存又如何？</p><p>对于“影响的是包含该路段的车票，库存数减一”这段话，描述是否准确？</p><table><thead><tr><th>座位</th><th>AB</th><th>BC</th><th>CD</th><th>DE</th></tr></thead><tbody><tr><td>1</td><td>已售AB-1</td><td></td><td>已售CD-1</td><td></td></tr><tr><td>2</td><td></td><td></td><td>已售CD-2</td><td></td></tr></tbody></table><p>售出CD-1，此时AD段库存几张？1张，2座AD段依旧可售。如果售出CD-2，此时AD段库存几张?欧豁，此时库存为0，因为AD段无论是1座还是2座均已售出。</p><p>如果我们直接套用结论“影响的是包含该路段的车票，库存数减一”，那么CD-1、CD-2售出后库存应该都是0。但这个结果显然不对，因为我们忽略了车票售出后的回收问题。</p><p>那么此时库存数的判断逻辑应该是：车票出售后，调整的库存为整段路线上没有卖过票的交集。</p><p>翻译下就是AB-1，CD-1出售后，这俩影响的分别是AC-1及AC-1包含AB-1段的子集，BE-1及BE-1包含CD-1的子集。</p><p>有点绕，慢慢理解。没理解也没关系，就记住这个票卖出去以后要回收的，后面卖的时候逻辑上要看看票收回来没。这也是12306相比于外卖项目更复杂的一点。</p><h4 id="II、模型设计"><a href="#II、模型设计" class="headerlink" title="II、模型设计"></a>II、模型设计</h4><p>票只有两种状态，已售和未售，分别用0-1表示。二维数据记录信息，即可同时包含路段，座位。</p><p>对于ticket[1]&#x3D;1110，ticket[1]表示1座位，1110表示AB-1，BC-1，CD-1均已售出，此时仅余DE-1。</p><h3 id="五、核心功能"><a href="#五、核心功能" class="headerlink" title="五、核心功能"></a>五、核心功能</h3><p>用户</p><blockquote><p>登录&#x2F;注册：使用手机号+验证码进行登录&#x2F;注册</p><p>乘客管理： 可以为自己或他人购票</p><p>余票查询：     查询某日起点至终点的所有车次及余票库存</p><p>车票购买：     选择目标车次，选择乘客，选择座位，支付购买</p><p>我的订单：     可查看购买成功的车票订单</p></blockquote><p>管理员</p><blockquote><p> 基础车次维护：    车站、车次、车箱、座位、途径站台</p><p>每日车次维护：    通过车次相关基础数据，计算每次车次数据</p><p>用户管理：           查看所有注册用户</p><p>车票管理：           查看已售出车票信息</p></blockquote><h3 id="六、模块划分"><a href="#六、模块划分" class="headerlink" title="六、模块划分"></a>六、模块划分</h3><p>开发我们会分模块开发，提前说下大概有哪些模块</p><blockquote><p>网关模块：路由转发、登录校验</p><p>会员模块：用户、乘客、已购买的车票</p><p>业务模块：所有的车次数据、余票信息</p><p>跑批模块：管理定时任务，界面启停</p><p>web模块：用户相关界面</p><p>admin模块：管理员相关界面</p></blockquote><p>#简单介绍下12306及相关逻辑，表述能力欠佳，我会继续努力的，各位看官老爷多多包涵。</p><p>#下一篇我们正式开启项目的实现，稳定更新中~</p><p>#参考课程：慕课Springboot3+微服务实战12306高性能售票系统</p>]]></content>
      
      
      <categories>
          
          <category> Springboot3-微服务12306 </category>
          
          <category> 介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 12306 </tag>
            
            <tag> Spring Boot 3.0.0 </tag>
            
            <tag> JDK 17 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/05/22/myblog/"/>
      <url>/2024/05/22/myblog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
